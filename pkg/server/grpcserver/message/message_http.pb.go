// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.12.4
// source: message.proto

package message

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterGetAddressNonceAt = "/message.Greeter/GetAddressNonceAt"
const OperationGreeterGetBalance = "/message.Greeter/GetBalance"
const OperationGreeterGetBlockByHash = "/message.Greeter/GetBlockByHash"
const OperationGreeterGetBlockByNum = "/message.Greeter/GetBlockByNum"
const OperationGreeterGetBlockDetails = "/message.Greeter/GetBlockDetails"
const OperationGreeterGetMaxBlockHeight = "/message.Greeter/GetMaxBlockHeight"
const OperationGreeterGetTransactionDetails = "/message.Greeter/GetTransactionDetails"
const OperationGreeterGetTxByHash = "/message.Greeter/GetTxByHash"
const OperationGreeterSendTransaction = "/message.Greeter/SendTransaction"
const OperationGreeterSign = "/message.Greeter/Sign"

type GreeterHTTPServer interface {
	GetAddressNonceAt(context.Context, *ReqNonce) (*ResposeNonce, error)
	GetBalance(context.Context, *ReqBalance) (*ResBalance, error)
	GetBlockByHash(context.Context, *ReqBlockByHash) (*RespBlockData, error)
	GetBlockByNum(context.Context, *ReqBlockByNumber) (*RespBlock, error)
	GetBlockDetails(context.Context, *GetBlockDetailsRequest) (*GetBlockDetailsResponse, error)
	GetMaxBlockHeight(context.Context, *ReqMaxBlockHeight) (*ResMaxBlockHeight, error)
	GetTransactionDetails(context.Context, *GetTransactionDetailsRequest) (*GetTransactionDetailsResponse, error)
	GetTxByHash(context.Context, *ReqTxByHash) (*RespTxByHash, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	Sign(context.Context, *SginRequest) (*SginResponse, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.POST("/balance", _Greeter_GetBalance0_HTTP_Handler(srv))
	r.POST("/transaction", _Greeter_SendTransaction0_HTTP_Handler(srv))
	r.GET("/block/height/{height}", _Greeter_GetBlockByNum0_HTTP_Handler(srv))
	r.GET("/transaction/{hash}", _Greeter_GetTxByHash0_HTTP_Handler(srv))
	r.GET("/transaction/nonce/{address}", _Greeter_GetAddressNonceAt0_HTTP_Handler(srv))
	r.GET("/block/hash/{hash}", _Greeter_GetBlockByHash0_HTTP_Handler(srv))
	r.GET("/height", _Greeter_GetMaxBlockHeight0_HTTP_Handler(srv))
	r.GET("/block/details/{height}", _Greeter_GetBlockDetails0_HTTP_Handler(srv))
	r.GET("/transaction/details/{hash}", _Greeter_GetTransactionDetails0_HTTP_Handler(srv))
	r.POST("/transaction/sign", _Greeter_Sign0_HTTP_Handler(srv))
}

func _Greeter_GetBalance0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqBalance
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBalance(ctx, req.(*ReqBalance))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResBalance)
		return ctx.Result(200, reply)
	}
}

func _Greeter_SendTransaction0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendTransactionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterSendTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendTransaction(ctx, req.(*SendTransactionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendTransactionResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetBlockByNum0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqBlockByNumber
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetBlockByNum)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlockByNum(ctx, req.(*ReqBlockByNumber))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RespBlock)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetTxByHash0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqTxByHash
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetTxByHash)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTxByHash(ctx, req.(*ReqTxByHash))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RespTxByHash)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetAddressNonceAt0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqNonce
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetAddressNonceAt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddressNonceAt(ctx, req.(*ReqNonce))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResposeNonce)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetBlockByHash0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqBlockByHash
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetBlockByHash)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlockByHash(ctx, req.(*ReqBlockByHash))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RespBlockData)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetMaxBlockHeight0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqMaxBlockHeight
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetMaxBlockHeight)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMaxBlockHeight(ctx, req.(*ReqMaxBlockHeight))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResMaxBlockHeight)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetBlockDetails0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBlockDetailsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetBlockDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlockDetails(ctx, req.(*GetBlockDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlockDetailsResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetTransactionDetails0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTransactionDetailsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetTransactionDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransactionDetails(ctx, req.(*GetTransactionDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTransactionDetailsResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_Sign0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterSign)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Sign(ctx, req.(*SginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SginResponse)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	GetAddressNonceAt(ctx context.Context, req *ReqNonce, opts ...http.CallOption) (rsp *ResposeNonce, err error)
	GetBalance(ctx context.Context, req *ReqBalance, opts ...http.CallOption) (rsp *ResBalance, err error)
	GetBlockByHash(ctx context.Context, req *ReqBlockByHash, opts ...http.CallOption) (rsp *RespBlockData, err error)
	GetBlockByNum(ctx context.Context, req *ReqBlockByNumber, opts ...http.CallOption) (rsp *RespBlock, err error)
	GetBlockDetails(ctx context.Context, req *GetBlockDetailsRequest, opts ...http.CallOption) (rsp *GetBlockDetailsResponse, err error)
	GetMaxBlockHeight(ctx context.Context, req *ReqMaxBlockHeight, opts ...http.CallOption) (rsp *ResMaxBlockHeight, err error)
	GetTransactionDetails(ctx context.Context, req *GetTransactionDetailsRequest, opts ...http.CallOption) (rsp *GetTransactionDetailsResponse, err error)
	GetTxByHash(ctx context.Context, req *ReqTxByHash, opts ...http.CallOption) (rsp *RespTxByHash, err error)
	SendTransaction(ctx context.Context, req *SendTransactionRequest, opts ...http.CallOption) (rsp *SendTransactionResponse, err error)
	Sign(ctx context.Context, req *SginRequest, opts ...http.CallOption) (rsp *SginResponse, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) GetAddressNonceAt(ctx context.Context, in *ReqNonce, opts ...http.CallOption) (*ResposeNonce, error) {
	var out ResposeNonce
	pattern := "/transaction/nonce/{address}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetAddressNonceAt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetBalance(ctx context.Context, in *ReqBalance, opts ...http.CallOption) (*ResBalance, error) {
	var out ResBalance
	pattern := "/balance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterGetBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetBlockByHash(ctx context.Context, in *ReqBlockByHash, opts ...http.CallOption) (*RespBlockData, error) {
	var out RespBlockData
	pattern := "/block/hash/{hash}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetBlockByHash))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetBlockByNum(ctx context.Context, in *ReqBlockByNumber, opts ...http.CallOption) (*RespBlock, error) {
	var out RespBlock
	pattern := "/block/height/{height}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetBlockByNum))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetBlockDetails(ctx context.Context, in *GetBlockDetailsRequest, opts ...http.CallOption) (*GetBlockDetailsResponse, error) {
	var out GetBlockDetailsResponse
	pattern := "/block/details/{height}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetBlockDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetMaxBlockHeight(ctx context.Context, in *ReqMaxBlockHeight, opts ...http.CallOption) (*ResMaxBlockHeight, error) {
	var out ResMaxBlockHeight
	pattern := "/height"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetMaxBlockHeight))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetTransactionDetails(ctx context.Context, in *GetTransactionDetailsRequest, opts ...http.CallOption) (*GetTransactionDetailsResponse, error) {
	var out GetTransactionDetailsResponse
	pattern := "/transaction/details/{hash}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetTransactionDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetTxByHash(ctx context.Context, in *ReqTxByHash, opts ...http.CallOption) (*RespTxByHash, error) {
	var out RespTxByHash
	pattern := "/transaction/{hash}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetTxByHash))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...http.CallOption) (*SendTransactionResponse, error) {
	var out SendTransactionResponse
	pattern := "/transaction"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterSendTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) Sign(ctx context.Context, in *SginRequest, opts ...http.CallOption) (*SginResponse, error) {
	var out SginResponse
	pattern := "/transaction/sign"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterSign))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
